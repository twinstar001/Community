<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- DB 연결 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />

		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />

		<property name="username" value="COMMUNITY" />
		<property name="password" value="community" />

	</bean>

	<!-- MyBatis 설정 위에 방식으로 연결해도 되는데 그러면 코드 줄만 엄청길고 좀 힘듬 그래서 이거 자주씀 -->
	<!-- mybatis가 디비에 접속할수 있도록 도와주는 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis/mybatis.xml" />
	</bean>

	<!--  mybatis 가 디비에 쿼리(sql)를 실행하고, 결과를 받아오게 도와주는 설정 -->
	<bean id="sqlSessionTemplate"
		  class="org.mybatis.spring.SqlSessionTemplate">
		  <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

	<!--  Transaction(Commit:반영 Rollback: 원상복구) 설정 -->
	<bean id="transactionManager"
		  class= "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		 <property name="dataSource" ref="dataSource"/> 
    </bean>
    
    <!--  Rollback 규칙 설정 -->
    
    <tx:advice id="rollbackRule" transaction-manager="transactionManager">
    	<tx:attributes>
    		<tx:method name="create*" rollback-for="RuntimeException"/>
    		<tx:method name="read*" rollback-for="RuntimeException"/>
    		<tx:method name="update*" rollback-for="RuntimeException"/>
    		<tx:method name="delete*" rollback-for="RuntimeException"/>
    		<tx:method name="increment*" rollback-for="RuntimeException"/>
    	</tx:attributes>
    </tx:advice>
    
	<!-- Transcation 대상 설정 어떤 상황에 대해 지가 알아서 활동하게 해줌 expression은 누구한태 롤백대상을 설정할거냐-->
	<!-- execution(접근제한자 ) .*(..) == 모든 함수 및 파라미터 전부다 대상으로 설정한다.-->
	
	<aop:config>
		<aop:pointcut id="pointCut"
					  expression="execution(public * com.ktds..service.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="rollbackRule" pointcut-ref="pointCut" />
	</aop:config>
	
</beans>
